# E: Elastic
# C: Cloud
#    on 
# K: Kubernenets

# The Elastic Stack (ELK):
# E: Elasticsearch
# L: Logstash
# K: Kibana
# Beats

# minikube start --memory=max
# kubectl create -f https://download.elastic.co/downloads/eck/2.9.0/crds.yaml
# kubectl apply -f https://download.elastic.co/downloads/eck/2.9.0/operator.yaml
# kubectl -n elastic-system get pod elastic-operator-0
# takes ~10min
# minikube tunnel
# Go to HTTPS URL: minikube service list | grep k8s-funzone-kb-http
#   username: elastic
#   password: echo $(kubectl -n eck-system get secret k8s-funzone-es-elastic-user -o jsonpath='{.data.elastic}' | base64 --decode)
# Go to <HTTPS URL>/app/discover
apiVersion: v1
kind: Namespace
metadata:
  # The ECK operator runs by default in the elastic-system namespace.
  # It is recommended to choose a dedicated namespace for workloads, 
  # rather than using the elastic-system or the default namespace.
  name: eck-system
---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: k8s-funzone
  namespace: eck-system
spec:
  version: 8.9.1
  nodeSets:
  - name: default
    count: 1
    config:
      # node.roles: [master, data, ingest]  # See https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#node-roles
      node.store.allow_mmap: false
  # Uncomment to allow external access
  # http:
  #   service:
  #     spec:
  #       type: LoadBalancer
---
apiVersion: logstash.k8s.elastic.co/v1alpha1
kind: Logstash
metadata:
  name: k8s-funzone
  namespace: eck-system
spec:
  count: 1
  elasticsearchRefs:
    - name: k8s-funzone
      clusterName: kf
  version: 8.9.1
  pipelines:
    - pipeline.id: main
      config.string: |
        input {
          beats {
            port => 5044
          }
        }
        output {
          elasticsearch {
            hosts => [ "${KF_ES_HOSTS}" ]
            user => "${KF_ES_USER}"
            password => "${KF_ES_PASSWORD}"
            ssl_certificate_authorities => "${KF_ES_SSL_CERTIFICATE_AUTHORITY}"
          }
        }
  services:
    - name: beats
      service:
        spec:
          # Uncomment to allow external access
          # type: LoadBalancer
          type: ClusterIP
          ports:
            - port: 5044
              name: "filebeat"
              protocol: TCP
              targetPort: 5044
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: k8s-funzone
  namespace: eck-system
spec:
  version: 8.9.1
  count: 1
  elasticsearchRef:
    name: k8s-funzone
  http:
    service:
      spec:
        type: LoadBalancer
---
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: k8s-funzone
  namespace: eck-system
spec:
  type: filebeat
  version: 8.9.1
  elasticsearchRef:
    name: k8s-funzone
  kibanaRef: # set up example dashboards packaged with the Beat
    name: k8s-funzone
  config:
    filebeat.autodiscover:
     providers:
       - type: kubernetes
         node: ${NODE_NAME}
         hints.enabled: true
         hints.default_config:
           type: container
           paths:
             - /var/log/containers/*${data.kubernetes.container.id}.log
    processors:
    - add_cloud_metadata: {}
    - add_host_metadata: {}
  daemonSet:
  # deployment:
    # replicas: 1
    podTemplate:
      metadata:
        annotations:
          # See: https://www.elastic.co/guide/en/beats/filebeat/8.9/filebeat-input-container.html#filebeat-input-container-common-options
          co.elastic.logs/json.keys_under_root: 'true'
          co.elastic.logs/json.overwrite_keys: 'true'
          co.elastic.logs/json.add_error_key: 'true'
          co.elastic.logs/json.expand_keys: 'true'
      spec:
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true  # Allows to provide richer host metadata
        serviceAccountName: k8s-funzone-beat-filebeat
        automountServiceAccountToken: true
        terminationGracePeriodSeconds: 30
        containers:
        - name: filebeat
          securityContext:
            runAsUser: 0
            # If using Red Hat OpenShift uncomment this:
            # privileged: true
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          volumeMounts:
          - name: varlogcontainers
            mountPath: /var/log/containers
          - name: varlogpods
            mountPath: /var/log/pods
          - name: varlibdockercontainers
            mountPath: /var/lib/docker/containers
        volumes:
        - name: varlogcontainers
          hostPath:
            path: /var/log/containers
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-funzone-beat-filebeat
  namespace: eck-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-funzone-beat-filebeat
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods", "nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-funzone-beat-filebeat
subjects:
- kind: ServiceAccount
  name: k8s-funzone-beat-filebeat
  namespace: eck-system
roleRef:
  kind: ClusterRole
  name: k8s-funzone-beat-filebeat
  apiGroup: rbac.authorization.k8s.io
---